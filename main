import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;

@ExtendWith(SpringExtension.class)
class ClassATest {

  @Mock
  private Service service;

  @InjectMocks
  private ClassA classAObject;
  
  private MockMvc mockMvc;

  @BeforeEach
  public void init() {
    mockMvc = MockMvcBuilders.standaloneSetup(classAObject).build();
  }

  @Test
  void testCreateMethod_RequestWithMandatoryParameters_Success() throws Exception {
    final RequestClass request = createRequest();
	
	when(service.createMethod(any(RequestClass.class))).thenReturn(RequestClassVo);
	doNothing().when(iLabelsetService).create(RequestClassVo, userContext);

    mockMvc.perform(
            post(ENDPOINT).content("json string").accept(MediaType.APPLICATION_JSON)
                    .contentType(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk());
  }
}

// assertThatThrownBy(() -> labelsetService.create(addLabelsetRequestVo, userContext))
            .isInstanceOf(LabelSetAndPickupValidationException.class);
    verifyNoInteractions(labelsetRepository);
	assertNotNull(userContext.getGroupId());
	
